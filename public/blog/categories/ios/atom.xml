<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Brady Love]]></title>
  <link href="http://bradylove.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://bradylove.com/"/>
  <updated>2013-02-15T23:36:22-08:00</updated>
  <id>http://bradylove.com/</id>
  <author>
    <name><![CDATA[Brady Love]]></name>
    <email><![CDATA[love.brady@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rounded Corners With Ruby Motion]]></title>
    <link href="http://bradylove.com/blog/2012/06/04/rounded-corners-with-ruby-motion/"/>
    <updated>2012-06-04T20:08:00-07:00</updated>
    <id>http://bradylove.com/blog/2012/06/04/rounded-corners-with-ruby-motion</id>
    <content type="html"><![CDATA[<p>Another trick I learned with Objective-C/Ruby Motion is giving a view is rounded corners. When I first set out to learn how to do rounded corners with Ruby Motion, I quickly found a one liner calling layer.cornerRadius= on a view, which I thought was awesome! I remember thinking to myself "that was too easy but awesome!". I soon found out I was right, it was too easy. So I set out again to find a better solution and found a similar question on stack overflow for someone trying to accomplish the same thing with Objective-C. I find myself using this alot now so I thought I would share it and hope it helps someone else as well. Before I get started with the details. I have already created a project with "motion create AppName", created a window and initilized the RootViewController in my app_delegate.rb.
And here is the starting code for the RootViewController which just has a single UIView, 200x200 in size, centered and colored green.</p>

<p>``` ruby root_view_controller.rb
class RootViewController &lt; UIViewController
  def viewDidLoad</p>

<pre><code>view.backgroundColor = UIColor.lightGrayColor

@rounded_rect = UIView.alloc.initWithFrame([[view.size.width / 2 - 100, view.size.height / 2 - 100], [200, 200]])
@rounded_rect.backgroundColor = UIColor.greenColor


view.addSubview @rounded_rect
</code></pre>

<p>  end
end
```
So you should have something that looks like this.</p>

<p><img src="http://content.screencast.com/users/BLove/folders/Jing/media/955d5e1d-e52a-420d-9a2e-9ac3a8afd81a/00000005.png" alt="" /></p>

<h2>The Easy Way</h2>

<p>Okay so real quick I thought I would show you the easy way and show you the problem I found with it. To quickly achieve this we just need to set the cornerRadius on the UIView's layer. So after setting the backgroundColor for @rounded_rect I am going to add this line.</p>

<p><code>ruby root_view_controller.rb
@rounded_rect.layer.cornerRadius = 30.0
</code>
Awesome! We now have some rounded corners!</p>

<p><img src="http://content.screencast.com/users/BLove/folders/Jing/media/f33fc52a-9c7d-42dd-8f3a-f1df10f283b4/00000006.png" alt="" /></p>

<h2>The Problem</h2>

<p>Okay so this works out great for us if we need to quickly add rounded corners to a view. But the problem comes when we add subviews that are going to be in the area of those rounded corners. To show you this I am going to add another UIView as a subview to our @rounded_rect view. We will call this @non_rounded_subview, I am going to make this subview the same size as its parent and color it red by adding the following.</p>

<p>```ruby root_view_controller.rb</p>

<pre><code>@non_rounded_subview = UIView.alloc.initWithFrame(@rounded_rect.bounds)
@non_rounded_subview.backgroundColor = UIColor.redColor

@rounded_rect.addSubview @non_rounded_subview
</code></pre>

<p>```
OH NOES! Where did our rounded corners go?</p>

<p><img src="http://content.screencast.com/users/BLove/folders/Jing/media/c74b0c0f-b854-4195-a660-f7919c577bf3/00000007.png" alt="" /></p>

<p>Our rounded corners are still there, however the parent views rounded corners do not clip the child view. To show this better I will set the backgroundColor of @non_rounded_subview to have a slight transparent to better show this.</p>

<p><code>ruby root_view_controller.rb
@non_rounded_subview.backgroundColor = UIColor.colorWithRed(1.0, green: 0.0, blue: 0.0, alpha: 0.5)
</code></p>

<p><img src="http://content.screencast.com/users/BLove/folders/Jing/media/1e3ffeab-3e07-42aa-81c1-0670b3bb88f5/00000008.png" alt="" /></p>

<h2>The Solution</h2>

<p>So the easy way works great if you just need some simple rounded corners and arent going to be placing anything over them. However in my case I needed the rounded corners of the parent view to clip the child view. The solution I came up with ended up being even greater then I expected, not only cliping child views but giving me alot more control over the corners. To accomplish this I used UIBezierPath and CAShapeLayer to create a layer mask and then applied the layer mask to the parent view (@rounded_rect). To do this I removed the following line</p>

<p><code>ruby root_view_controller.rb
@rounded_rect.layer.cornerRadius = 30.0
</code></p>

<p>and replaced it with this</p>

<p>```ruby root_view_controller.rb
mask_path = UIBezierPath.bezierPathWithRoundedRect(@rounded_rect.bounds,</p>

<pre><code>                                               byRoundingCorners: UIRectCornerAllCorners,
                                               cornerRadii:       CGSizeMake(30.0, 30.0))
</code></pre>

<p>mask_layer = CAShapeLayer.layer
mask_layer.frame = @rounded_rect.bounds
mask_layer.path = mask_path.CGPath
@rounded_rect.layer.mask = mask_layer
```
And our rounded corners are back and better than ever!!!</p>

<p><img src="http://content.screencast.com/users/BLove/folders/Jing/media/87b459f3-3893-4d5f-89f0-95484f871fe3/00000009.png" alt="" /></p>

<p>The cornerRadii for the UIBezierPath is where we set how much extreme we want our corners rounded. The first value of the CGSizeMake is a float for the width of your corner radius, the other being a float for the height of your corner radius. So you can change those values to something like</p>

<p><code>ruby root_view_controller
cornerRadii:       CGSizeMake(40.0, 150.0))
</code></p>

<p>And you will end up with something a little different.</p>

<p><img src="http://content.screencast.com/users/BLove/folders/Jing/media/8a5a9051-4ff0-431f-8036-726f440d4d4c/00000010.png" alt="" /></p>

<p>You also have more control in which corners actually get the rounding by editing the "byRoundingCorners" value. I currently have that set to UIRectCornerAllCorners. Which we can set to UIRectCornerAllCorners, UIRectCornerTopLeft, UIRectCornerTopRight, UIRectCornerBottomLeft, UIRectCornerBottomRight or any combonation of these seperated by a pipe ( | ). For example to round only the top left and bottom right corners I would change the following.</p>

<p><code>ruby root_view_controlelr.rb
byRoundingCorners: UIRectCornerAllCorners,
</code>
to
<code>ruby root_view_controlelr.rb
byRoundingCorners: UIRectCornerTopLeft | UIRectCornerBottomRight,
</code>
Ending up with,</p>

<p><img src="http://content.screencast.com/users/BLove/folders/Jing/media/207d53ff-8e1e-4dd1-afa8-6979ed78f54d/00000011.png" alt="" /></p>

<p>Well thats about it, in the end my code ended up looking like this incase you missed something. Or you can check it out on my Github at <a href="https://github.com/bradylove/RoundedCorners-RubyMotion">https://github.com/bradylove/RoundedCorners-RubyMotion</a></p>

<p>```ruby root_view_controller.rb
class RootViewController &lt; UIViewController
  def viewDidLoad</p>

<pre><code>view.backgroundColor = UIColor.lightGrayColor

@rounded_rect = UIView.alloc.initWithFrame(
  [[view.size.width / 2 - 100, view.size.height / 2 - 100], [200, 200]])
@rounded_rect.backgroundColor = UIColor.greenColor

mask_path = UIBezierPath.bezierPathWithRoundedRect(@rounded_rect.bounds,
                                                   byRoundingCorners: UIRectCornerTopLeft | UIRectCornerBottomRight,
                                                   cornerRadii:       CGSizeMake(40.0, 100.0))
mask_layer = CAShapeLayer.layer
mask_layer.frame = @rounded_rect.bounds
mask_layer.path = mask_path.CGPath
@rounded_rect.layer.mask = mask_layer

@non_rounded_subview = UIView.alloc.initWithFrame(@rounded_rect.bounds)
@non_rounded_subview.backgroundColor = UIColor.colorWithRed(1.0, green: 0.0, blue: 0.0, alpha: 0.5)

@rounded_rect.addSubview @non_rounded_subview
view.addSubview @rounded_rect
</code></pre>

<p>  end
end
```</p>

<p>Hope you enjoyed. I have not done a whole lot of documentation or blogging but it is something I want to get better at and do more of so any input is more than welcome. Also if anyone has a good suggestion for a screenshot app that does uploads that would be helpful too. Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Gradients With Ease In Ruby Motion]]></title>
    <link href="http://bradylove.com/blog/2012/05/27/create-gradients-with-ease-in-ruby-motion/"/>
    <updated>2012-05-27T13:01:00-07:00</updated>
    <id>http://bradylove.com/blog/2012/05/27/create-gradients-with-ease-in-ruby-motion</id>
    <content type="html"><![CDATA[<p>Lately I have been messing around with Ruby Motion and have been learning alot about the way things are done in iOS. Along the way there have been many things I wanted to do but had no clue how (Having very little expirience with Objective-C). One of the things I wanted to figure out how to do was to create gradients programatically so I would not have to images. After about 3 hours of trying to figure it out and failing miserably I gave up and used images anyway. But the next day it suddenly hit me and I was able to figure it out and it was alot easier then what I was trying to do the night before. So I figured someone else might find this useful.</p>

<p>In the first part of this example I am going to show you how add a gradient background on a UIView. So first thing we need to do is create our Ruby Motion project and setup our view controller.</p>

<p><code>
motion create GradientExample
cd GradientExample
</code></p>

<p>Then open up the Rakefile created by the generator and add the QuartzCore framework.</p>

<p>```ruby Rakefile
$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'</p>

<p>Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = 'EasyGradients'
  app.frameworks &lt;&lt; "QuartzCore"
end
```</p>

<p>Next we will create our UIWindow and add a view controller to it. So open up your app_delegate.rb and make it look like this.</p>

<p>```ruby app/app_delegate.rb
class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)</p>

<pre><code>@window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)
@window.rootViewController = GradientViewController.new
@window.rootViewController.wantsFullScreenLayout = true
@window.makeKeyAndVisible

true
</code></pre>

<p>  end
end
```</p>

<p>Then create the file for our GradientViewController.</p>

<p><code>sh
touch app/gradient_view_controller.rb
</code></p>

<p>Open up the gradient_view_controller.rb. This is were we are going to work our gradient magic.</p>

<p>```ruby app/gradient_view_controller.rb
class GradientViewController &lt; UIViewController
  def viewDidLoad</p>

<pre><code>gradient = CAGradientLayer.layer
gradient.frame = view.bounds
gradient.colors = [UIColor.blackColor.CGColor, UIColor.whiteColor.CGColor]

view.layer.addSublayer(gradient)
</code></pre>

<p>  end
end
```</p>

<p>Then back in your console you can go ahead and run the <code>rake</code> command to launch the app in the iOS Simulator and should have something like this.</p>

<p><img src="https://img.skitch.com/20120527-gk3926patwmn7b9q42ebjs7ts8.jpg" alt="" /></p>

<p>You may notice that gradient.colors just accepts an array so we can easily add more colors to the array.
```ruby app/gradient_view_controller.rb
gradient.colors = [UIColor.blackColor.CGColor, UIColor.redColor.CGColor,</p>

<pre><code>               UIColor.whiteColor.CGColor, UIColor.blueColor.CGColor]
</code></pre>

<p>```
And you will end up with this</p>

<p><img src="https://img.skitch.com/20120527-dwuxbbhnyrewgne2m7wpk7sdmq.jpg" alt="" /></p>

<p>For more control over the locations of the gradients you can add an array to gradient locations with a Float making their location. 0 being top 1 being bottom.
<code>ruby app/gradient_view_controller.rb
gradient.locations = [0.1, 0.2, 0.8, 0.9]
</code>
Which will end up someting like this</p>

<p><img src="https://img.skitch.com/20120527-p3si97dy86x9bskaxsad8eea8s.jpg" alt="" /></p>

<p>Well thats about it, you can easily use these gradients for backgrounds for almost all UI objects. Hope this helps someone that is as lost as me. There are some more iOS/Ruby Motion tricks I have been learning so check back soon on write ups for them.</p>
]]></content>
  </entry>
  
</feed>
